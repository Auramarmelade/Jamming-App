{"ast":null,"code":"let accessToken = \"\";\nconst cliendID = \"6274a44e1b63403c9650543182ebce6c\"; // Identifiant client Spotify\nconst redirectURL = \"http://localhost:3001\"; // URL de redirection après autorisation\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      // 1. Si accessToken est déjà défini, le retourner\n      return accessToken;\n    } else {\n      // 2. Sinon, chercher le jeton d'accès et le temps d'expiration dans l'URL\n      const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n      const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n      if (tokenInURL && expiryTime) {\n        // 3. Si le jeton d'accès et le temps d'expiration sont trouvés dans l'URL\n        accessToken = tokenInURL[1];\n        const expiresIn = Number(expiryTime[1]);\n        // 4. Configurer une fonction pour obtenir un nouveau jeton d'accès après le temps d'expiration\n        window.setTimeout(Spotify.getAccessToken, expiresIn * 1000);\n        // 5. Effacer les paramètres de l'URL pour des raisons de sécurité\n        window.history.pushState(\"Access Token\", null, \"/\");\n        // 6. Retourner le jeton d'accès\n        return accessToken;\n      } else {\n        // 7. Rediriger l'utilisateur vers la page d'autorisation Spotify pour obtenir le jeton d'accès\n        const redirect = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n        window.location.href = redirect;\n      }\n    }\n  },\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse) {\n        console.error(\"Response error\");\n      }\n      return jsonResponse.tracks.items.map(t => ({\n        id: t.id,\n        name: t.name,\n        artist: t.artists[0].name,\n        album: t.album.name,\n        uri: t.uri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris) return;\n    const aToken = Spotify.getAccessToken();\n    const header = {\n      Authorization: `Bearer ${aToken}`\n    };\n    let userId;\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: header\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      let playlistId;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: header,\n        method: \"post\",\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n          headers: header,\n          method: \"post\",\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["accessToken","cliendID","redirectURL","Spotify","getAccessToken","tokenInURL","window","location","href","match","expiryTime","expiresIn","Number","setTimeout","history","pushState","redirect","search","term","fetch","method","headers","Authorization","then","response","json","jsonResponse","console","error","tracks","items","map","t","id","name","artist","artists","album","uri","savePlaylist","trackUris","aToken","header","userId","playlistId","body","JSON","stringify","uris"],"sources":["/Users/guillaumecoquemont/react/jamming_app/src/util/Spotify/Spotify.js"],"sourcesContent":["let accessToken = \"\";\nconst cliendID = \"6274a44e1b63403c9650543182ebce6c\"; // Identifiant client Spotify\nconst redirectURL = \"http://localhost:3001\"; // URL de redirection après autorisation\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      // 1. Si accessToken est déjà défini, le retourner\n      return accessToken;\n    } else {\n      // 2. Sinon, chercher le jeton d'accès et le temps d'expiration dans l'URL\n      const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n      const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n      if (tokenInURL && expiryTime) {\n        // 3. Si le jeton d'accès et le temps d'expiration sont trouvés dans l'URL\n        accessToken = tokenInURL[1];\n        const expiresIn = Number(expiryTime[1]);\n        // 4. Configurer une fonction pour obtenir un nouveau jeton d'accès après le temps d'expiration\n        window.setTimeout(Spotify.getAccessToken, expiresIn * 1000);\n        // 5. Effacer les paramètres de l'URL pour des raisons de sécurité\n        window.history.pushState(\"Access Token\", null, \"/\");\n        // 6. Retourner le jeton d'accès\n        return accessToken;\n      } else {\n        // 7. Rediriger l'utilisateur vers la page d'autorisation Spotify pour obtenir le jeton d'accès\n        const redirect = `https://accounts.spotify.com/authorize?client_id=${cliendID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n        window.location.href = redirect;\n      }\n    }\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse) {\n          console.error(\"Response error\");\n        }\n        return jsonResponse.tracks.items.map((t) => ({\n          id: t.id,\n          name: t.name,\n          artist: t.artists[0].name,\n          album: t.album.name,\n          uri: t.uri,\n        }));\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris) return;\n    const aToken = Spotify.getAccessToken();\n    const header = { Authorization: `Bearer ${aToken}` };\n    let userId;\n    return fetch(`https://api.spotify.com/v1/me`, { headers: header })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        let playlistId;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: header,\n          method: \"post\",\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n              {\n                headers: header,\n                method: \"post\",\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}