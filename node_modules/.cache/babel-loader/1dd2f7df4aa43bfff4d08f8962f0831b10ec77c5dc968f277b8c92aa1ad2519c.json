{"ast":null,"code":"var _jsxFileName = \"/Users/guillaumecoquemont/react/jamming_app/src/Components/App/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styles from \"./App.module.css\"; // Importing component-specific styles for App\nimport SearchResults from \"../SearchResults/SearchResults\"; // Importing the SearchResults component\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify/Spotify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Declaring states used in the component\n  const [searchResults, setSearchResults] = useState([\n  // State to store search results\n  {\n    name: \"example track name 1\",\n    artist: \"example track artist 1\",\n    album: \"example track album 1\"\n  }, {\n    name: \"example track name 2\",\n    artist: \"example track artist 2\",\n    album: \"example track album 2\"\n  }]);\n  const [playlistName, setPlaylistName] = useState(\"Example Playlist name\"); // State to store playlist name\n  const [playlistTracks, setPlaylistTracks] = useState([\n  // State to store playlist tracks\n  {\n    name: \"example Playlist name 1\",\n    artist: \"example Playlist artist 1\",\n    album: \"example Playlist album 1\",\n    id: 0\n  }, {\n    name: \"example Playlist name 2\",\n    artist: \"example Playlist artist 2\",\n    album: \"example Playlist album 2\",\n    id: 1\n  }]);\n\n  // Function to add a track to the playlist\n  function addTrack(track) {\n    const existingTrack = playlistTracks.some(t => t.id === track.id);\n    const newTrack = playlistTracks.concat(track);\n    if (existingTrack) {\n      setPlaylistTracks(prevTracks => [...prevTracks, track]);\n    } else {\n      console.log(\"Track already exists\");\n    }\n  }\n\n  // Function to remove a track from the playlist\n  function removeTrack(track) {\n    const existingTrack = playlistTracks.filter(t => t.id !== track.id);\n    setPlaylistTracks(existingTrack);\n  }\n\n  // Function to update the playlist name\n  function updatePlaylistName(name) {\n    setPlaylistName(name);\n  }\n\n  // Function to save the playlist\n  function savePlaylist() {\n    const trackURIs = playlistTracks.map(t => t.uri);\n    Spotify.savePlaylist(playlistName, trackURIs).then(() => {\n      updatePlaylistName(\"New Playlist\");\n      setPlaylistTracks([]);\n    });\n  }\n\n  // Search function called when a search is performed\n  function search(term) {\n    Spotify.search(term).then(result => setSearchResults(result));\n    console.log(term);\n  }\n\n  // Rendering the App component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.h1,\n      children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.highlight,\n        children: \"mmm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), \"ing\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.App,\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"App-playlist\"],\n        children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n          userSearchResults: searchResults,\n          onAdd: addTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n          playlistName: playlistName,\n          playlistTracks: playlistTracks,\n          onRemove: removeTrack,\n          onNameChange: updatePlaylistName,\n          onSave: savePlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FYVK3gh62rSidRYl73XFWmplgBY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","styles","SearchResults","SearchBar","Playlist","Spotify","jsxDEV","_jsxDEV","App","_s","searchResults","setSearchResults","name","artist","album","playlistName","setPlaylistName","playlistTracks","setPlaylistTracks","id","addTrack","track","existingTrack","some","t","newTrack","concat","prevTracks","console","log","removeTrack","filter","updatePlaylistName","savePlaylist","trackURIs","map","uri","then","search","term","result","children","className","h1","highlight","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","userSearchResults","onAdd","onRemove","onNameChange","onSave","_c","$RefreshReg$"],"sources":["/Users/guillaumecoquemont/react/jamming_app/src/Components/App/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./App.module.css\"; // Importing component-specific styles for App\nimport SearchResults from \"../SearchResults/SearchResults\"; // Importing the SearchResults component\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify/Spotify\"; \n\nfunction App() {\n  // Declaring states used in the component\n  const [searchResults, setSearchResults] = useState([\n    // State to store search results\n    {\n      name: \"example track name 1\",\n      artist: \"example track artist 1\",\n      album: \"example track album 1\",\n    },\n    {\n      name: \"example track name 2\",\n      artist: \"example track artist 2\",\n      album: \"example track album 2\",\n    },\n  ]);\n  const [playlistName, setPlaylistName] = useState(\"Example Playlist name\"); // State to store playlist name\n  const [playlistTracks, setPlaylistTracks] = useState([\n    // State to store playlist tracks\n    {\n      name: \"example Playlist name 1\",\n      artist: \"example Playlist artist 1\",\n      album: \"example Playlist album 1\",\n      id: 0,\n    },\n    {\n      name: \"example Playlist name 2\",\n      artist: \"example Playlist artist 2\",\n      album: \"example Playlist album 2\",\n      id: 1,\n    },\n  ]);\n\n  // Function to add a track to the playlist\n  function addTrack(track) {\n    const existingTrack = playlistTracks.some((t) => t.id === track.id);\n    const newTrack = playlistTracks.concat(track);\n    if (existingTrack) {\n      setPlaylistTracks((prevTracks) => [...prevTracks, track]);\n    } else {\n      console.log(\"Track already exists\");\n    }\n  }\n\n  // Function to remove a track from the playlist\n  function removeTrack(track) {\n    const existingTrack = playlistTracks.filter((t) => t.id !== track.id);\n    setPlaylistTracks(existingTrack);\n  }\n\n  // Function to update the playlist name\n  function updatePlaylistName(name) {\n    setPlaylistName(name);\n  }\n\n  // Function to save the playlist\n  function savePlaylist() {\n    const trackURIs = playlistTracks.map((t) => t.uri);\n    Spotify.savePlaylist(playlistName, trackURIs).then(() => {\n      updatePlaylistName(\"New Playlist\");\n      setPlaylistTracks([]);\n    });\n  }\n\n  // Search function called when a search is performed\n  function search(term) {\n    Spotify.search(term).then((result) => setSearchResults(result));\n    console.log(term);\n  }\n\n  // Rendering the App component\n  return (\n    <div>\n      {/* Main title of the application */}\n      <h1 className={styles.h1}>\n        Ja<span className={styles.highlight}>mmm</span>ing\n      </h1>\n      {/* Main container of the application */}\n      <div className={styles.App}>\n        {/* Search bar component */}\n        <SearchBar onSearch={search} />\n        {/* Container for search results and playlist */}\n        <div className={styles[\"App-playlist\"]}>\n          {/* Search results component */}\n          <SearchResults userSearchResults={searchResults} onAdd={addTrack} />\n          {/* Playlist component */}\n          <Playlist\n            playlistName={playlistName}\n            playlistTracks={playlistTracks}\n            onRemove={removeTrack}\n            onNameChange={updatePlaylistName}\n            onSave={savePlaylist}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}